pipeline {
    agent any

    environment {
        TELEGRAM_BOT_TOKEN = credentials('telegram-bot-token')
        CHAT_ID = '884722934'
    }

    stages {
        stage('Clone repository') {
            steps {
                git branch: 'main', credentialsId: '<credentialsId>', url: 'https://github.com/1exanOK/jenkins_sf.git'
            }
        }

        stage('Build & Run Container') {
            steps {
                sh 'docker build -t nginx .'
                sh 'docker run -d -p 9889:80 nginx'
            }
        }

        stage('Check HTTP Response') {
            steps {
                script {
                    def responseCode = sh(returnStdout: true, script: "curl -s -o /dev/null -w '%{http_code}' localhost:9889").trim()
                    if (responseCode != "200") {
                        error("HTTP Response code is not 200!")
                    }
                }
            }
        }

        stage('Compare MD5 Sums') {
            steps {
                script {
                    // MD5 –æ—Ç –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                    def originalMD5 = sh(script: "md5sum index.html | awk '{print \$1}'", returnStdout: true).trim()

                    // –ü–æ–ª—É—á–∞–µ–º HTML –æ—Ç Nginx
                    def contentFromNginx = sh(returnStdout: true, script: "curl -s localhost:9889/index.html")

                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ —á–µ—Ä–µ–∑ writeFile
                    writeFile file: 'temp-index.html', text: contentFromNginx

                    // MD5 –æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ
                    def receivedMD5 = sh(script: "md5sum temp-index.html | awk '{print \$1}'", returnStdout: true).trim()

                    // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    sh "rm temp-index.html"

                    if (originalMD5 != receivedMD5) {
                        error("MD5 sums do not match!")
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
        success {
            notifyTelegram("üöÄ –°–±–æ—Ä–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! Branch: ${env.BRANCH_NAME ?: 'main'}, Build ‚Ññ${env.BUILD_NUMBER}")
        }
        failure {
            notifyTelegram("‚õëÔ∏è –°–±–æ—Ä–∫–∞ –ø—Ä–æ–≤–∞–ª–∏–ª–∞—Å—å! Branch: ${env.BRANCH_NAME ?: 'main'}, Build ‚Ññ${env.BUILD_NUMBER}. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç—á—ë—Ç: ${env.BUILD_URL}")
        }
    }
}

def notifyTelegram(message) {
    withCredentials([string(credentialsId: 'telegram-bot-token', variable: 'TELEGRAM_BOT_TOKEN')]) {
        sh """
           curl -X POST \
               -H 'Content-Type: application/json' \
               -d '{"chat_id": "${CHAT_ID}", "text": "${message}"}' \
               "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage"
        """
    }
}
